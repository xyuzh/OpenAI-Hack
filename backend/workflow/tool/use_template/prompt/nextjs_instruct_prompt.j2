This is a Next.js template designed as a scaffold for building web applications iteratively. Use this as a starting point for creating modern, production-ready web apps with best practices built-in.

## Development Commands (Bun Preferred)

- **Install dependencies**: `bun install`
- **Start development server**: `bun dev` (uses Turbopack for faster builds)
- **Build for production**: `bun run build`
- **Start production server**: `bun start`
- **Lint code**: `bun run lint`
- **Add more shadcn/ui components**: `bunx shadcn@latest add [component-name]` (47 components already installed)

## Tech Stack

- **Framework**: Next.js 15.3.4 with App Router
- **Runtime**: Bun (preferred package manager and runtime)
- **Language**: TypeScript with strict mode enabled
- **Styling**: Tailwind CSS v4 with custom design tokens
- **UI Components**: Full shadcn/ui component library installed (47 components)
- **Forms**: React Hook Form with Zod validation
- **Charts**: Recharts for data visualization
- **Themes**: next-themes for dark/light mode switching
- **Fonts**: Geist Sans and Geist Mono via next/font/google

## Project Structure

- `src/app/` - Next.js App Router pages and layouts
- `src/components/` - Reusable React components (create this directory as needed)
- `src/components/ui/` - Complete shadcn/ui component library (47 components installed)
- `src/lib/` - Utility functions (includes `cn` helper for Tailwind class merging)
- `src/hooks/` - Custom React hooks (includes `use-mobile.ts` from shadcn/ui)
- `public/` - Static assets (SVG icons included)
- `src/app/page.tsx` - **MUST BE REWRITTEN - Contains only placeholder code**

## Important Notes
- **MANDATORY: File Overwriting**: When using this template, you MUST rewrite `src/app/page.tsx`. The file currently contains only a TODO comment and needs to be replaced with your actual application content.
- **Theme Provider**: The template includes proper theme provider setup with `suppressHydrationWarning` on the `<html>` element to prevent hydration errors when using next-themes.
- **Hydration Safety**: The layout uses `suppressHydrationWarning` and `disableTransitionOnChange` in ThemeProvider to ensure smooth theme switching without hydration mismatches.

## Iterative Development Best Practices

### Feature Development Workflow
1. **Plan**: Break features into small, testable components
2. **Lint**: Always run `bun run lint` before implementing new features
3. **Build**: Run `bun run build` to catch TypeScript errors early
4. **Component-First**: Create reusable components in `src/components/`
5. **UI Components**: Use shadcn/ui for consistent design: `bunx shadcn@latest add button`

### Code Quality Standards
- **TypeScript**: Enable strict mode, use proper types for all props and functions
- **ESLint**: Fix all linting errors before committing code
- **Component Structure**: Follow React Server Component patterns for Next.js App Router
- **Styling**: Use Tailwind classes with the `cn()` utility for conditional styling
- **File Naming**: Use kebab-case for files, PascalCase for components

### Adding New Features
1. Create feature branch from main
2. Run `bun run lint` to ensure clean starting point
3. Add necessary dependencies with `bun add [package]`
4. Implement feature with proper TypeScript types
5. Test in development with `bun dev`
6. Build and verify with `bun run build`
7. Fix any linting issues with `bun run lint`

### UI Component Integration
- **Complete library installed**: All 47 shadcn/ui components are ready to use
- **Available components**: accordion, alert, alert-dialog, aspect-ratio, avatar, badge, breadcrumb, button, calendar, card, carousel, chart, checkbox, collapsible, command, context-menu, dialog, drawer, dropdown-menu, form, hover-card, input, input-otp, label, menubar, navigation-menu, pagination, popover, progress, radio-group, resizable, scroll-area, select, separator, sheet, sidebar, skeleton, slider, sonner, switch, table, tabs, textarea, toggle, toggle-group, tooltip
- **Form handling**: React Hook Form with Zod validation pre-configured
- **Charts**: Recharts integration for data visualization
- **Theming**: next-themes for dynamic theme switching
- **Customize**: Modify CSS variables in `src/app/globals.css`

## Key Configuration

- **Path aliases**: `@/*` maps to `./src/*` for imports
- **shadcn/ui**: Configured with "new-york" style, RSC enabled, neutral base color
- **Tailwind**: Custom CSS variables for theming, dark mode support via `.dark` class
- **TypeScript**: ES2017 target, bundler module resolution, strict mode enabled

## Architecture Notes

This template provides a solid foundation for modern web applications:
- **App Router**: Uses Next.js App Router (not Pages Router) for file-based routing
- **Server Components**: Optimized for React Server Components by default
- **Component Library**: Ready for shadcn/ui integration with proper aliases
- **Styling System**: Tailwind CSS v4 with design tokens and dark mode
- **Performance**: Turbopack for fast development, font optimization built-in
- **Hydration-Safe Theming**: Configured with `suppressHydrationWarning` and next-themes to prevent theme flashing and hydration mismatches

## Template project file content 
File: package.json
```json
{
  "name": "nextjs_template",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.1.1",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.525.0",
    "next": "15.3.4",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-day-picker": "^9.7.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.59.0",
    "react-resizable-panels": "^3.0.3",
    "recharts": "^3.0.2",
    "sonner": "^2.0.5",
    "tailwind-merge": "^3.3.1",
    "vaul": "^1.1.2",
    "zod": "^3.25.67"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.4",
    "typescript": "^5"
  }
}
```

File: components.json
```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

# File: src/app/globals.css
```css
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

File: postcss.config.mjs
```js
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
```

File: src/lib/utils.ts
```ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

File: src/components/theme-provider.tsx
```tsx
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider, type ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
```

File: src/app/layout.tsx
```tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { ThemeProvider } from "@/components/theme-provider";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}
```

File: src/app/page.tsx
```tsx
export default function Home() {
  return (
    <div>
      {/* TODO: Add your content here */}
    </div>
  );
}
```